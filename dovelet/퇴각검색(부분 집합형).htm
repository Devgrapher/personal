
<!-- saved from url=(0081)http://211.228.163.31/30stair/backtracking1/backtracking1.php?pname=backtracking1 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-949">
      <title>퇴각검색(부분 집합형)</title>
      
      <link rel="stylesheet" type="text/css" href="./퇴각검색(부분 집합형)_files/main.css">
   </head>
   <body>

// 작업 중.....


<p>반복하는데 귀신인 컴퓨터에 적당한 방법이다. 가능한 경우를 모두 검사(exhaustive search)하는 
무식한(?)방법이다.

</p><p>답 내는 것이 문제가 아니라 얼마 만큼의 빠른 시간에 작업을 끝낼수 있는
가를 고민해야 되는 파트.

</p><p>가능성이 없는 것은 미리 잘라버리는 것이 관건이다. 예를 들어, 3 번의 시합에서  2 번 우승하면 이기는 게임에서 미리 2 번 이기면
나머지 한 번은 할 필요가 없다. 이런 가능성을 생각해서 미리 많이 잘라버리면 그 만
큼의 실행시간이 빨라진다.

</p><p>가능한 경우를 모두 검사하는 방법에는 보통 두 가지 유형의 문제로 나뉠수가 있다.
하나는 부분 집합형이고 다른 하나는 팩토리얼 형 문제이다.

</p><p> 예를 들어 , 주머니 속에 10 개의 공이 있고 , 각 공에는 번호가 부여되어 있다.
이 주머니에서 몇 개의 공을 꺼내어 합이 20 이 공이 있을 까를 알고자하는 경우의 유형은 2^10
가지의 모든 경우를 검사하는 부분 집합형 유형이고 , 

</p><p>10 개의 공을 임의로 나열했을 때 인접한 수의 곱이 최대 인 경우는
어떤 경우인가를 알고자 할 때 10 ! 가지의 모든 경우를 생각해야
하므로 이는 팩토리얼 형 문제라고 생각할 수 있다.

</p><h3>부분집합형 백트래킹</h3>

<p> 주머니 속에 1,2,3 이 쓰져 있는 공 3 개가 있고 , 이를 뽑아내는 
방법은 총 8 가지 경우가 있다.

</p><ul>
<li>1
</li><li>2
</li><li>3
</li><li>1 , 2
</li><li>1 , 3
</li><li>2 , 3
</li><li>1 , 2 , 3
</li><li>하나도 뽑지않은 방법
</li></ul>

모든 부분집합을 검사하는 경우의 문제이다.

즉 n 개의 원소를 가지는 집합의 부분 집합은 2^n 개이다. n 개의 원소가 존재하면 
2^n 개 모두를 검사하는 방법이다. 물론 이 과정에서 답이 될 가능성이 없는 것은 미리 잘라내어
실행시간을 높인다.

<hr>

<pre style="background-color:#e0e0e0;font-size:12pt;width:700;">(문제) sum of subset 

6 , 1 , 9 , 8 , 3 , 4 , 7

총 합은 38 , 합은 반은 19 이다.

이 수들을 이용하여 19 를 만들수 있는 방법의  수가 몇가지 인가?
</pre>

<h4 style="background-color:skyblue;"> 부분 집합형 문제의 기본 틀 </h4>


첫째 원소, 둘째 원소  2 개 있을 때 부분집합의 수는 4 개이다.

<ul>
<li>2 가지 모두 포함하는 경우 (o o)
</li><li>첫 원소 포함 , 둘째 원소 포함하지 않는 경우 (o x)
</li><li>첫 원소 포함하지 않고 , 둘째 원소 포함하는 경우(x o)
</li><li>2 가지 모두 포함하지 않는 경우 (x x)
</li></ul>

o 를 1 로 x 를 0 으로 놓으면 ,

<ul>
<li> 1 , 1
</li><li> 1 , 0
</li><li> 0 , 1
</li><li> 0 , 0
</li></ul>

<p> 원소의 수가 2 개 일 때 

</p><p>이를 구현하기 위해 배열(배열명을 include[] 라 하자)을 사용하여 

</p><p><img src="./퇴각검색(부분 집합형)_files/include1.gif">

</p><p> 원소의 수가 3 개일 때

</p><p><img src="./퇴각검색(부분 집합형)_files/include2.gif">

</p><p>부분집합형 문제의 기본틀

</p><pre class="source">#include &lt; stdio.h &gt;
int include[5];
        
void <b>bt</b>(int i)
{
   int k;
      
   if(i==4){ 
       for(k=1;k&lt;=4;k++)
          printf("%d ",include[k]);
          printf("\n");
   }else{
       include[i+1]=1; //포함하는 경우 
       <b>bt(i+1);</b>
       include[i+1]=0;//포함하지 않는 경우
       <b>bt(i+1);</b>
   }
}
        
main()
{
   bt(0);
}
</pre>
      
<hr>

<p><b>(보기)수의 부분합</b>-- <a href="http://211.228.163.31/30stair/scale/scale.php?pname=scale">문제보기</a>


(수의 부분합 풀이)

</p><h4>(소스 1)</h4>

부분 집합형 기본 틀에서 포함하는 경우 즉  1 인 경우 에는 
데이터를 더하면서 레벨을 높여가고 0 인 경우 더 하지 않고 
가는 부분이 포함된 경우이다.

<pre class="source">int data[]={0,40,20,30,10};
int include[5];

void process(int i,int total)
{
  int k;

  if (i==4){
    if (total==50){
      for(k=1;k&lt;=4;k++)
        if (include[k]==1) printf("%d ",data[k]);
      printf("\n");
    }
  }else{
    include[i+1]=1;
    <b>process(i+1,total+data[i+1]);</b>
    include[i+1]=0;
    <b>process(i+1,total);</b>
  }
}


main()
{
  process(0,0);
}
</pre>

그림으로 나타내면    

<p><img src="./퇴각검색(부분 집합형)_files/half_of_subset1.gif">



<!--
소스 1 에서는 데이터 개수가 작은 경우에는 무리없이 실행되지만 , 데이터의 개수가 많아
지는 경우 예를 들어 30 개 정도의 데이터만 입력되어도 연산회수가 2<sup>30</sup> 번의 
연산이 이루어진다.<p>
-->


</p><h4>(소스 2)</h4>

소스 1 에서는 16 번의 비교가 일어난다.

<p>소스 1 을 조금 더 개선해보면 , total 값이 구하고자 하는 50 을 초과하면 더 이상
의미가 없으므로 더 이상 확장하지 않으면 수행시간을 효율을 높일수 있을 것이다.


</p><pre class="source">int data[]={0,40,20,30,10};
int include[5];

void process(int i,int total)
{
  int k;

  if (total &gt; 50) return; //이 부분 

  if (i==4){
    if (total==50){
      for(k=1;k&lt;=4;k++)
        if (include[k]==1) printf("%d ",data[k]);
      printf("\n");
    }
  }else{
    include[i+1]=1;
    process(i+1,total+data[i+1]);
    include[i+1]=0;
    process(i+1,total);
  }
}

main()
{
  process(0,0);
}
</pre>

<p><img src="./퇴각검색(부분 집합형)_files/half_of_subset2.gif">
 
<!--
<a href="half_of_sum2.c">소스 2</a><p>
-->

</p><h4>(소스 3 - bound 이용 )</h4>

i 번째 level 에서의 bound 값이란?

<blockquote>
(i + 1 번째 데이터) + ( i + 2 번째 데이터) + ( i + 3 번째 데이터) + ....
</blockquote>

문제에서 각 레벨 별 bound 값을 구하면 

<p></p><ul>
<li> level 0 에서의 bound 값 : 40 + 20 + 30 + 10 = 100
</li><li> level 1 에서의 bound 값 : 20 + 30 + 10 = 60
</li><li> level 2 에서의 bound 값 : 30 + 10 = 40
</li><li> level 3 에서의 bound 값 : 10 
</li><li> level 4 에서의 bound 값 : 0
</li></ul>

<p><img src="./퇴각검색(부분 집합형)_files/bound.gif">

</p><p>몇 지점에서 bound 에 대해 알아보면(합의 절반 50 을 구하는게 목표)

</p><ul>
   <li><h5><font color="purple">1 번지점</font></h5> 
   현재 지점의 값이 20 이고, 남은 데이터의 총합 즉 level 2 에서의 bound 값이 40 이므로 더하면 60. 이는 50 보다
커므로 가능성 있고 

<p></p></li><li> <h5><font color="purple">2 번 지점</font></h5> 구한 값이 0 이고 , level 2 에서의
bound 값이 40 이므로 더하면 40. 이는 50 보다 작으므로 더 이상
진행해도 50 보다 크질 수가 없으므로 더 이상 진행 안함.

<p></p></li><li> <h5><font color="purple">3 번 지점</font></h5> 구한 값이 50 이고 , level 3 에서의
bound 값이 10 이므로 더하면 60. 이는 50 보다 크므로 가능성이 
있고

<p></p></li><li><h5><font color="purple">4 번 지점</font></h5> 구한 값이 20 이고 , level 3 에서의
bound 값이 10 이므로 더하면 30. 이는 50 보다 작으므로 더 이상
진행해도 50 보다 크질 수가 없으므로 더 이상 진행 안함.

</li></ul>

<p>bound 를 이용하여 소스 2 를 조금 더 개선해보자. 


</p><pre class="source">int data[]={0,40,20,30,10};
int include[5];

void process(int i,int total,int remaining)
{
  int k;


  if (total &gt; 50) return;
  if (total+ remaining &lt; 50) return; //이 부분 

  if (i==4){
    if (total==50){
      for(k=1;k&lt;=4;k++)
        if (include[k]==1) printf("%d ",data[k]);
      printf("\n");
    }
  }else{
    include[i+1]=1;
    process(i+1,total+data[i+1],<b>remaining-data[i+1]</b>);
    include[i+1]=0;
    process(i+1,total,<b>remaining-data[i+1]</b>);
  }
}


main()
{
  process(0,0,100);
}
</pre>

<p><img src="./퇴각검색(부분 집합형)_files/half_of_subset3.gif">

<!--
<a href="half_of_sum3.c">소스 3</a><p>
-->

</p><h4>(소스 4) </h4>

소스 3 의 if 문을 함수로 띠어낸 형태

<pre class="source">int data[]={0,40,20,30,10};
int include[5];

int promising(int total,int remaining)  // 이 함수를 유망함수라 함 
{
  if (total &gt; 50||total+ remaining &lt; 50) return 0;
  return 1;

}

void process(int i,int total,int remaining)
{
  int k;

  if (promising(total,remaining))
     if (i==4){
       if (total==50){
         for(k=1;k&lt;=4;k++)
           if (include[k]==1) printf("%d ",data[k]);
         printf("\n");
     }
   }else{
       include[i+1]=1;
       process(i+1,total+data[i+1],remaining-data[i+1]);
       include[i+1]=0;
       process(i+1,total,remaining-data[i+1]);
   }
}


main()
{
  process(0,0,100);
}
</pre>

<!--
<a href="half_of_sum4.c">소스 4</a><p>
-->



<pre class="src">출처:dovelet
</pre>
      
<hr>
<a href="http://211.228.163.31/judgeonline/showmessage.php?pname=backtracking1">[질/답]</a>
<div align="right">
<a href="http://211.228.163.31/index.php">[홈으로]</a>&nbsp;&nbsp;<a href="javascript:history.go(-1)">[뒤 로]</a>
</div>

   

</body></html>