
<!-- saved from url=(0072)http://211.228.163.31/30stair/complement/complement.php?pname=complement -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-949">
      <title>보수(complement)</title>
      
      <link rel="stylesheet" type="text/css" href="./보수(complement)_files/main.css">
   </head>
   <body>

<h3> 컴퓨터에서 정수 표현 법 </h3>

<!--
이 문제는 보수의 성질을 이용하면 간단히 구할 수 있다.

<pre class=source>
scanf("%d",&n);

printf("%d\n",n & -n );
</pre>
-->

<pre style="margin-left:3em;font-size:10pt">차례.
   -<a href="http://211.228.163.31/30stair/complement/complement.php?pname=complement#complement" class="A5">보수 설명 </a>
   -<a href="http://211.228.163.31/30stair/complement/complement.php?pname=complement#make_complement" class="A5">보수만들기</a>
   -<a href="http://211.228.163.31/30stair/complement/complement.php?pname=complement#why_complement" class="A5">왜 보수 사용하나</a>
   -<a href="http://211.228.163.31/30stair/complement/complement.php?pname=complement#fixed_point" class="A5">컴퓨터에서 정수 표현법</a>
   -<a href="http://211.228.163.31/30stair/complement/complement.php?pname=complement#why_2complement" class="A5">2 의 보수 사용하는 이유</a>
</pre>


<h3><a name="complement">(1) 보수 설명 </a></h3>

 각 진법에는 어떤 보수가 있는가? 

<blockquote>
   n 진법에는 n 의 보수와 n-1 의 보수가 있다.

   <ul>
   <li>10 진법에는 9 의 보수와 10 의 보수가 있고 , 
   </li><li>16 진법에는 15 의보수와 16 의 보수가 있다.
   </li><li> 2 진법에는  1 의보수와 2 의 보수가 있다.
   </li></ul>
</blockquote>

<h3><a name="make_complement">(2) 보수 만들기 </a></h3>

<blockquote>

먼저 익숙한  10 진수에서 9 의 보수와 10 의 보수에 대해서 알아보자.
   (이진수에서도  개념은 동일하다)
   <p>

   (보기) 10 진수 35 의 9 의보수와 10 의 보수는?

   </p><div style="border:1 solid gray width=300;margin:2em 2em 2em 2em 3em;padding:3px">
   (풀이)
   10 진수에서 9 의 보수는 9 에서 각 자리를 뺀 값이 9 의 보수가 된다.


   <ul>
      <li> 9 - 3 = 6
      </li><li> 9 - 5 = 4
   </li></ul>

   35 의 9 의 보수는 64 이다.
   </div>

   n-1 보수에서 n 보수로 바꿀 때는 n-1 보수에서 1 을 더하면 n 보수가 된다. 그러므로
   35 의 10 의 보수는 64 에서 1 을 더한 65 가 된다.#
   <p>

   (보기) 2 진수 101 의 1 의보수와 2 의보수는?
   </p><p>

   (풀이)

   </p><div style="border:1 solid gray width=300;margin:2em 2em 2em 2em 3em;padding:3">
   1 의 보수는  1 을 각 자리에서 빼면 1 의 보수이다. 

   <ul>
      <li>1-1=0
      </li><li>1-0=1
      </li><li>1-1=0
   </li></ul>

   101 의 1 의 보수는 010 이다. 2 의 보수는 이 수에서 1 을 더한하 011 이 2 의 보수이다. #
   </div>

   정리하면 , n 진법에서는 n-1 의 보수 , n 의 보수가 존재한다.
   n-1 의 보수를 구할 때는 n-1 을 각 자리에서 빼면 구할 수 있고, 이 수에 1 을 더하면
   n 의 보수가 된다.

</blockquote>

<h3><a name="why_complement"> (3) 왜 보수를 사용하나? </a></h3>

<blockquote>
   컴퓨터는 뺄셈도 덧셈으로 답을 구한다. 어떻게 뺄셈을 덧셈으로 답을 구할 수 
   있는지는 보수의 성질을 이용한다는 것이다.
   <p> 우리에게 익숙한 10 진수로 감산을 어떻게 가산처럼 행하는지를 알아보자.

   </p><p>(보기) 아래 식은 답이 54 이다. 보수를 이용하여 어떻게 54 를 구하는지를 알아보자.

</p><pre>  83
- 29
-----
</pre>

   (설명)

   <b>양수의 보수는 수 그대로</b>이고 , 음수의 보수는 전에 배운
   대로 구한다는것이다.


<ol>
<li>9 의 보수를 사용하는 경우

<blockquote>
   먼저 두 수의 9 의보수를 구한다.

      
      <ul>
    <li>83 의 9 의 보수는 83
     </li><li>-29 의 9 의 보수는 70
  </li></ul>
  <p>

  두수를 더하면 

  </p><p> <img src="./보수(complement)_files/complement1.gif">

</p><p>  밖으로 나가는 올림수(carry)가 발생했다. 이 캐리를 end-around carry 라 하고 
  9 의 보수에서는 이 캐리가 발생하면 다시 더 해야 한다.

  </p><p> <img src="./보수(complement)_files/complement2.gif">
</p></blockquote>

</li><li>10 의 보수를 사용하는 경우

<blockquote>
먼저 두 수의 10 의보수를 구한다.

<ul>
<li> 양수 83 의 10 의 보수는 83
</li><li> 음수 29 의 10 의 보수는 71
</li></ul>
<p>

두 수를 더하면,

</p><p><img src="./보수(complement)_files/complement3.gif">

10 의 보수에서는 end-around carry 를 무시한다.
</p></blockquote>

</li></ol>

</blockquote>

<h3><a name="fixed_point"> (4) 컴퓨터에서 정수 표현법 </a></h3>

<blockquote>

정수를 표현하는 방법은 3 가지

<ul>
<li> 부호화 절대치
</li><li> 1 의 보수
</li><li> 2 의 보수
</li></ul>

<p>

설명의 편의를 위해 4 비트로 정수를 표현한다고 가정하자.

</p><p> <img src="./보수(complement)_files/fixed_rep1.gif">


</p><ul>
<li> 첫 비트는 부호를 표현한다. 0 은 양수 1 은 음수로 약속
</li><li> 나머지 3 비트로 수를 표현한다.
</li></ul>



<b> 부호화 절대치 방법</b>은 수를 나타내는 자리에 10 진수를 2 진수로 바꾸어 나타내고,
음수이면 첫 비트를 1 , 양수이면 0 로 나타내는 방법이고 ,
<p>

<b> 1 의 보수 방법</b> 은 구한 부호화 절대치에서 부호 비트가 1 즉 음수인 경우 수 비트를
1 이면 0 으로, 0 이면 1 로 반전(1 을 각자리에서 빼는 것과 동일)하여 나타내는 방법이고
</p><p>

<b> 2 의 보수 방법</b> 은  첫 비트가 1 인 음수인 경우 1 의 보수 방법으로 구한 수에 1 을 더하는
방법이다.
</p><p>

(보기) -3 의 부호화 절대치 , 1 의보수 , 2의보수로 표현하면?

</p><div style="border:1 solid gray width=300;margin:2em 2em 2em 2em 3em;padding:3">
(풀이)
기억해야 할 것은 첫 비트 즉 부호 비트는 변하지 않는다는 것이다.
<p>

<img src="./보수(complement)_files/fixed_rep2.gif">
</p><p>
#
</p></div>

<p>

정리해보면,
어떤 수를 2 의 보수과정으로 바꿀 때

</p><blockquote>

10 진수를 부호화 절대치로 바꾸고 --&gt;
이를 1 의 보수로 바꾸고 --&gt;
구한 수에서 1 을 더해서 2 의 보수 
</blockquote>
과정을 거쳐서 구할 수 있다.
<p>

</p><div style="background:black;color:white;width:100;font-size:13pt;">
문제의 핵심
</div>
<p> 부호화 절대치에서 1의 보수를 거치지 않고 바로 2 의 보수를 구하는 방법은 
부호화 절대치에서 오른쪽에서 왼쪽으로 오다 만다는 첫 비트가 1 일 때 까지 그대로 나머지는
반전(부호 비트 제외) 시키면  구할 수 있다. 

</p><p>
<img src="./보수(complement)_files/fixed_rep3.gif">
</p><p>

이 부분을 이해하면 이 문제에 대한 답이다.


</p></blockquote>

<h3><a name="why_2complement"> (5) 2 의 보수를 사용하는 이유</a> </h3>

<blockquote>
2 의 보수를 사용하는 장점으로는 

<dl>
<ol>
<li><dt> 단 하나의 0 이 존재한다.
</dt><dd> 1 의 보수와 부호화 절대치에서는 -0 이 존재한다. 이는 좋은 현상이 아니다.
<p>

</p><li><dt>단 한 번의 덧셈으로 두 수를 더할 수 있다.
</dt><dd> 1 의 보수에서 덧셈시 end-around carry 가 다시 더해야 하기에 두 번의
덧셈이 필요하지만 , 2 의 보수에서는 이 캐리를 무시하므로 단 한 번의 덧셈으로
연산이 가능하다.
<p>

</p><li><dt> 수의 표현 범위가 음수쪽으로 하나 많다.
</dt><dd> 4 비트로 정수를 표현할 때 -8 을 부호화절대치 , 1 의 보수에서는 표현할 수가 없다.
4 비트로 정수를 표현할 때 -8 ~ 7 까지 표현가능하다. 
<p>

n 비트로 정수를 표현할 때
</p><ul>
<li> 부호화 절대치, 1 의 보수에서 수의 표현 범위는  -2<sup>n-1</sup>+1 ~
2<sup>n-1</sup>-1
</li><li> 2 의 보수에서는 -2<sup>n-1</sup> ~ 2 <sup>n-1</sup>-1 
</li></ul>

</dd></li></dd></li></dd></li></ol>
</dl>
<p>

<table border="0" cellspacing="1" bgcolor="#000000" width="500" style="margin-left:6em">
<caption> 4 비트로 정수를 표현할 경우 </caption>
<tbody><tr bgcolor="#FFFFFF" align="center">
<th> 10 진수 </th> <th> 부호화 절대치 </th> <th> 1 의 보수 </th> <th> 2 의 보수 </th>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 7 </td> <td>0111 </td>  <td> 0111   </td> <td> 0111   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 6 </td> <td> 0110  </td>  <td> 0110    </td> <td>0110   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 5 </td> <td> 0101  </td>  <td> 0101   </td> <td> 0101  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 4 </td> <td> 0100  </td>  <td>0100    </td> <td> 0100  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 3 </td> <td> 0011  </td>  <td>  0011  </td> <td> 0011  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 2 </td> <td> 0010  </td>  <td> 0010   </td> <td> 0010  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 1 </td> <td> 0001  </td>  <td> 0001   </td> <td> 0001  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> 0 </td> <td> 0000  </td>  <td> 0000   </td> <td> 0000  </td>
</tr>

<tr bgcolor="#cccccc" align="center">
<td> -0  </td> <td> 1000  </td>  <td> 1111   </td> <td> x  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -1 </td> <td> 1001  </td>  <td> 1110   </td> <td> 1111   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -2 </td> <td> 1010  </td>  <td> 1101   </td> <td>1110   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -3  </td> <td> 1011  </td>  <td> 1100  </td> <td> 1101  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -4 </td> <td> 1100  </td>  <td> 1011   </td> <td> 1100  </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -5  </td> <td> 1101  </td> <td> 1010   </td> <td>1011   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -6 </td> <td> 1110   </td> <td> 1001   </td> <td>1010   </td>
</tr>

<tr bgcolor="#FFFFFF" align="center">
<td> -7 </td> <td> 1111  </td>  <td> 1000   </td> <td> 1001  </td>
</tr>

<tr bgcolor="#cccccc" align="center">
<td> -8 </td> <td> x  </td>  <td>  x  </td> <td> 1000  </td>
</tr>

</tbody></table>


</p><p>이제 현재 정수를 표현하는 4 바이트로 확장을 하면 

</p><p> <img src="./보수(complement)_files/fixed_rep4.gif">

</p><ul>
<li> 가장 큰수 : 0 1 1 1 1 .... 1 (16진수로 표현하면 7F FF FF FF ) 2^31 - 1
</li><li> 가장 작은수 : 1 0 0 0 0 0 0 0 ... 0 (16 진수로 표현하면 80 00 00 00 ) - 2^31
</li></ul>


</blockquote>

<h4>(6)최대 혹은 최소값 구할 때 초기값 설정 </h4>

<pre class="source">int a;

a = 0x7FFFFFFF; // 가장 큰 수로 보초(sentinel)를 세울 때
</pre>

<pre class="source">int a;

a = 0x80000000; // 가장 작은 수로 보초(sentinel)를 세울 때
</pre>

<pre class="src">출처:dovelet
</pre>

<hr>
<a href="http://211.228.163.31/judgeonline/showmessage.php?pname=complement">[질/답]</a>
<div align="right">
<a href="http://211.228.163.31/index.php">[홈으로]</a>&nbsp;&nbsp;<a href="javascript:history.go(-1)">[뒤 로]</a>
</div>



</body></html>