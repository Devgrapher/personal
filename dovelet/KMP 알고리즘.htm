
<!-- saved from url=(0063)http://211.228.163.31/30stair/KMP_doc/KMP_doc.php?pname=KMP_doc -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-949">
      <title>KMP 알고리즘</title>
      
      <link rel="stylesheet" type="text/css" href="./KMP 알고리즘_files/main.css">
	  <link href="./KMP 알고리즘_files/shCore.css" rel="stylesheet" type="text/css"> 
	  <link href="./KMP 알고리즘_files/shThemeDefault.css" rel="stylesheet" type="text/css"> 
	  <script src="./KMP 알고리즘_files/shCore.js" type="text/javascript"></script> 
	  <script src="./KMP 알고리즘_files/shBrushCpp.js" type="text/javascript"></script>

	  <script language="javascript"> 
	    SyntaxHighlighter.config.bloggerMode = true;
	    SyntaxHighlighter.config.clipboardSwf = '/scripts/clipboard.swf';
	    SyntaxHighlighter.all();
	  </script> 
   </head>
   <body>

<h2>KMP 알고리즘에 대해서</h2>

<h3> 1. 문자열 탐색</h3>

<blockquote>

기본적으로 우리는 문자열에서 문자를 찾는 알고리즘을 짠다면 하나씩 다 찾게 만드는 것이 대다수일 것이다. 만약 우리가 "abcababcabc"에서 “abc”라는 문자열을 찾을려고 할 때, 우리가 소스를 짠다면 이런 형태일 것이다.

<div><div id="highlighter_142688" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/KMP_doc/KMP_doc.php?pname=KMP_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c preprocessor">#include &lt;stdio.h&gt;</code></div><div class="line number2 index1 alt1"><code class="c preprocessor">#include &lt;string.h&gt;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="c color1 bold">int</code> <code class="c plain">main()</code></div><div class="line number5 index4 alt2"><code class="c plain">{</code></div><div class="line number6 index5 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">char</code> <code class="c plain">s[1000]={0},p[100]={0};</code></div><div class="line number7 index6 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">int</code> <code class="c plain">i,j,slen,plen;</code></div><div class="line number8 index7 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">bool</code> <code class="c plain">check;</code></div><div class="line number9 index8 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">scanf</code><code class="c plain">(</code><code class="c string">"%s"</code><code class="c plain">,s);</code></div><div class="line number10 index9 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">scanf</code><code class="c plain">(</code><code class="c string">"%s"</code><code class="c plain">,p);</code></div><div class="line number11 index10 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">slen=</code><code class="c functions bold">strlen</code><code class="c plain">(s),plen=</code><code class="c functions bold">strlen</code><code class="c plain">(p);</code></div><div class="line number12 index11 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">for</code><code class="c plain">(i=0;i &lt; slen-plen+1;i++)</code></div><div class="line number13 index12 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number14 index13 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">check=</code><code class="c keyword bold">true</code><code class="c plain">;</code></div><div class="line number15 index14 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">for</code><code class="c plain">(j=i;j &lt; i+plen;j++)</code></div><div class="line number16 index15 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number17 index16 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(s[j]!=p[j-i])</code></div><div class="line number18 index17 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number19 index18 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">check=</code><code class="c keyword bold">false</code><code class="c plain">;</code></div><div class="line number20 index19 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">break</code><code class="c plain">;</code></div><div class="line number21 index20 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number22 index21 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number23 index22 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(check) </code><code class="c functions bold">printf</code><code class="c plain">(</code><code class="c string">"Match : %d to %d\n"</code><code class="c plain">,i+1,i+plen);</code></div><div class="line number24 index23 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number25 index24 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">return</code> <code class="c plain">0;</code></div><div class="line number26 index25 alt1"><code class="c plain">}</code></div></div></td></tr></tbody></table></div></div>

&lt;보기 1&gt; 원시적인 문자열 탐색 알고리즘

<p>이렇게 소스를 짠다면 문자열 s,p 에 대해 문자열의 길이를 m,n이라고 한다면 총 수행 시간은 Θ(mn)의 시간이 걸릴 것이다. 이는 문자열의 길이가 길수록 매우 비효율적이다. 그렇다면 이제부터 더욱 빠르게 탐색하는 KMP 알고리즘에 대해 알아보자

</p></blockquote>

<h3>2. 오토마타를 이용한 문자열 탐색</h3>

<blockquote>
위에서 본 원시적인 방법을 더욱 빠르게 하기 위하여 오토마타를 사용해보자. 일단 오토마타를 모르는 사람들도 있을테니 dovelet 30장에서도 알아보겠지만 간단하게 설명하겠다. 오토마타는 여러 가지의 상태로 표현되는데, 문제 해결 절차를 상태의 변화로 표현하는 것이다. 오토마타는 다음과 같은 구성요소로 이루어져있다.

<p><img src="./KMP 알고리즘_files/kmp1.gif">

</p><p>자, 이제부터 소스를 작성해보자.
일단 우리가 어떤 알파벳으로 이루어진 문자열에서 abcdeabcade라는 문자를 찾는다고 하면, 이와 같이 오토마타를 만들어낼 수 있다.

</p><p><img src="./KMP 알고리즘_files/kmp2.gif">

</p><p>우리가 “abcdeabcade"에서 하나도 진행 안된 상태를 0, ”a"까지 했을 때 1, “ab"까지 했을 때 2, ... , 전체를 다 했을 때
11이라고 하면, 상태 전이 함수 δ는 다음과 같이 정의된다

</p><p><img src="./KMP 알고리즘_files/kmp3.gif">

</p><p>헌데, 어째서 상태 8에서 d를 입력받으면 4로 넘어가는 것일까? 하는 분들도 계실 것이다. 만약 이게 없다면 오토마타를 만든 이유가 없다. 우리가 상태 8에 있다는 것은 문자열에서 “abcdeabc"까지 일치했다는 소리다. 그런데 그 다음에 d가 나오면 "abcdeabcd"가
되므로 상태 9로 넘어갈 수는 없지만, 뒤의 ”abcd"가 있으므로 상태 4로 넘어갈 수 있는 것이다. 이것으로 오토마타는 완성되었다.

</p><p>이러한 오토마타를 완성했다면 소스를 이렇게 짤 수 있을 것이다.
(s는 전체 문자열,p는 탐색할 문자열, f는 목표 상태, slen은 s의 길이, plen은 p의 길이)

</p><div><div id="highlighter_787042" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/KMP_doc/KMP_doc.php?pname=KMP_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c plain">Matcher()</code></div><div class="line number2 index1 alt1"><code class="c plain">{</code></div><div class="line number3 index2 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">int</code> <code class="c plain">q=0,i;</code></div><div class="line number4 index3 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">for</code><code class="c plain">(i=0;i &lt; slen;i++)</code></div><div class="line number5 index4 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number6 index5 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">q=δ(q,s[i]);</code></div><div class="line number7 index6 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(q==f) </code><code class="c functions bold">printf</code><code class="c plain">(</code><code class="c string">"Matched!"</code><code class="c plain">);</code></div><div class="line number8 index7 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number9 index8 alt2"><code class="c plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>이 얼마나 간단해지는가? 하지만 더욱 간단하게 할 수 있다. "abcdeabcade"를 보면, 사용된 문자는 a, b, c, d, e 뿐이다. 고로 나머지 문자는 ‘기타’ 항목으로 넣어버릴 수 있다. 고로 아래와 같이 문자로 테이블을 만들어서 문자를 숫자로 변환시킨 후 더욱 간단하게 할 수 있다.

</p><p><img src="./KMP 알고리즘_files/kmp4.gif">

</p></blockquote>

<h3> 3. KMP 알고리즘</h3>

<blockquote>
우리는 오토마타를 이용하여 간단하게 만들어 보았다. KMP 알고리즘은 크누스(Knuth), 모리스(Morris), 프랫(Pratt) 세 사람의 이름을 딴 알고리즘으로, 위의 오토마타 문자열 탐색 알고리즘과 비슷하나, 상태 전이 함수 δ처럼 복잡하지 않고 더욱 간단명료하며 속도도 더욱 빠른 것이 특징이다. KMP 알고리즘에서는 δ대신 π를 이용한다.

<p>만약 우리가 “abcdabcwz”라는 문자열을 어떤 문자열에서 찾는다고 하자. 만약 우리가 어떤 문자열에서 탐색을 하다가 “abcdabc"까지 일치했는데 다음에 d가 나왔다면? 오토마타에서처럼 바로 ”abcd"까지 일치된 상태로 바꿔버릴 것이다.

</p><p>자, 이렇게 7번째까지 맞았는데 8번째 문자에서 틀렸다면? 그렇다면 그 다음에는 4번째 문자 ‘d'와 비교를 하게 만든다. 이렇게 하는 배열이 바로 π이다. 배열 π는 문자열을 탐색할 때 틀렸으면 다음으로 검색할 문자의 인덱스를 알려준다. “abcdabcwz"를 탐색할 때 π[7]은 3과 같아진다 (8번째 문자와 비교한 후 4번째 문자와 바로 비교하므로). 그렇다면 ”abcdabcwz"에 대해 π는 이렇게 작성할 수 있다.


</p><p><img src="./KMP 알고리즘_files/kmp5.gif">

</p><p>(π[0]의 경우 -1로 처리한 경우는 ‘예외 처리’를 위해서 한 것이다. 절대 -1번째 주소값을 찾게 만드는 것이 아니다.)

</p><p>자, 이제 소스를 보자.

</p><div><div id="highlighter_466485" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/KMP_doc/KMP_doc.php?pname=KMP_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c preprocessor">#include &lt;stdio.h&gt;</code></div><div class="line number2 index1 alt1"><code class="c preprocessor">#include &lt;string.h&gt;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="c color1 bold">char</code> <code class="c plain">s[1000]={0},p[100]={0};</code></div><div class="line number5 index4 alt2"><code class="c color1 bold">int</code> <code class="c plain">n,m,pi[100]={0};</code></div><div class="line number6 index5 alt1"><code class="c keyword bold">void</code> <code class="c plain">find_pi()</code></div><div class="line number7 index6 alt2"><code class="c plain">{</code></div><div class="line number8 index7 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">int</code> <code class="c plain">i=0,j=-1;</code></div><div class="line number9 index8 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">pi[0]=-1;</code></div><div class="line number10 index9 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">while</code><code class="c plain">(i &lt; m)</code></div><div class="line number11 index10 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number12 index11 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(j==-1 || p[i]==p[j])</code></div><div class="line number13 index12 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number14 index13 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">i++,j++;</code></div><div class="line number15 index14 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">pi[i]=j;</code></div><div class="line number16 index15 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number17 index16 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">else</code> <code class="c plain">j=pi[j];</code></div><div class="line number18 index17 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number19 index18 alt2"><code class="c plain">}</code></div><div class="line number20 index19 alt1"><code class="c keyword bold">void</code> <code class="c plain">kmp()</code></div><div class="line number21 index20 alt2"><code class="c plain">{</code></div><div class="line number22 index21 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">int</code> <code class="c plain">i=0,j=0;</code></div><div class="line number23 index22 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">while</code><code class="c plain">(i &lt; n)</code></div><div class="line number24 index23 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number25 index24 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(j==-1 || s[i]==p[j]) i++,j++;</code></div><div class="line number26 index25 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">else</code> <code class="c plain">j=pi[j];</code></div><div class="line number27 index26 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">if</code><code class="c plain">(j==m)</code></div><div class="line number28 index27 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">{</code></div><div class="line number29 index28 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">printf</code><code class="c plain">(</code><code class="c string">"Match : %d to %d\n"</code><code class="c plain">,i-m+1,i);</code></div><div class="line number30 index29 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">j=pi[j];</code></div><div class="line number31 index30 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number32 index31 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number33 index32 alt2"><code class="c plain">}</code></div><div class="line number34 index33 alt1"><code class="c color1 bold">int</code> <code class="c plain">main()</code></div><div class="line number35 index34 alt2"><code class="c plain">{</code></div><div class="line number36 index35 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">scanf</code><code class="c plain">(</code><code class="c string">"%s"</code><code class="c plain">,s);</code></div><div class="line number37 index36 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">scanf</code><code class="c plain">(</code><code class="c string">"%s"</code><code class="c plain">,p);</code></div><div class="line number38 index37 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">n=</code><code class="c functions bold">strlen</code><code class="c plain">(s),m=</code><code class="c functions bold">strlen</code><code class="c plain">(p);</code></div><div class="line number39 index38 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">find_pi();</code></div><div class="line number40 index39 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c plain">kmp();</code></div><div class="line number41 index40 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">return</code> <code class="c plain">0;</code></div><div class="line number42 index41 alt1"><code class="c plain">}</code></div></div></td></tr></tbody></table></div></div>

자, 이것으로 KMP 알고리즘이 완성되었다. KMP 알고리즘의 총 수행 시간은 Θ(n)이다.

</blockquote>

<pre class="src">출처:jhs7jhs
</pre>
      
<hr>
<a href="http://211.228.163.31/judgeonline/showmessage.php?pname=KMP_doc">[질/답]</a>
<div align="right">
<a href="http://211.228.163.31/index.php">[홈으로]</a>&nbsp;&nbsp;<a href="javascript:history.go(-1)">[뒤 로]</a>
</div>

   

</body></html>