
<!-- saved from url=(0060)http://211.228.163.31/30stair/dp_doc/dp_doc.php?pname=dp_doc -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-949">
      <title>다이나믹 프로그래밍 간략한 설명</title>
      
      <link rel="stylesheet" type="text/css" href="./다이나믹 프로그래밍 간략한 설명_files/main.css">
	  <link href="./다이나믹 프로그래밍 간략한 설명_files/shCore.css" rel="stylesheet" type="text/css"> 
	  <link href="./다이나믹 프로그래밍 간략한 설명_files/shThemeDefault.css" rel="stylesheet" type="text/css"> 
	  <script src="./다이나믹 프로그래밍 간략한 설명_files/shCore.js" type="text/javascript"></script> 
	  <script src="./다이나믹 프로그래밍 간략한 설명_files/shBrushCpp.js" type="text/javascript"></script>

	  <script language="javascript"> 
	    SyntaxHighlighter.config.bloggerMode = true;
	    SyntaxHighlighter.config.clipboardSwf = '/scripts/clipboard.swf';
	    SyntaxHighlighter.all();
	  </script> 
   </head>
  
<body>

<h3> 다이나믹 프로그래밍(dp)이란? </h3>
   
다음과 같이 나열된  수열이 있다고 하자.

<blockquote>
1 , 2  , 3 , 4 , ....
</blockquote>

이를 식으로 정의하는 방법은 두 가지가 있다.

<ol>
<li>일반항으로 
</li><li>귀납적으로 
</li></ol>

즉 일반항은  1 번째 항이 1 이고 , 2 번째 항이 2 , ..., n 번째 항이  n 이므로 
다음과 같은 일반항을 구할 수 있다.(예가 너무 쉽나^^)

<blockquote>
a<sub>n</sub> = n (n &gt;= 1)
</blockquote>

<p>다음으로 귀납적으로 정의하는 방법은 인접한 항과 현재 항과의 관계로 수열의 정의하는 방법이다.
인접한 항이 바로 앞 항일수도  멀리 떨어진 항일수도 있다. 제시된 문제의 경우는  바로 앞 항에 1 을 더하면
현재 항 값을 구할 수 있다. 

</p><p>귀납적으로 정의하는 경우는 처음 시작하는 항(base)을  반드시 밝혀야 유일한 수열이 정의가 된다.

</p><p>귀납적 정의

</p><blockquote>
   <ul>
   <li>a<sub>1</sub> = 1 (base ... 밑 바닥)
   </li><li>a<sub>n</sub> = a<sub>n-1</sub> + 1  (memoization ... 점화식 )
   </li></ul>
</blockquote>

그러면 두 가지 중 어떤 방법이 더 나을까? 
일반항으로 수열을 정의하는게 더 효율적이다. 왜냐하면 1000 번째 항을 구하는 경우
일반항인 경우 바로 답을 낼 수 있지만 귀납적으로 정의한 경우에는 처음 부터 차례대로 따라가
봐야 한다. 

<p>하지만 모든 수열을 일반항으로 표현할 수 없는 경우도 있고 나타낼 수 있더라도 그 방법이 
복잡한 경우 차라리 귀납적으로 정의하는게 어떤 수열인지를 더 명확하게 나타낼수가 있다.

</p><p>유명한 fibonacii 수열은 일반항으로 나타낼수도 있지만 귀납적인 정의가 더 알려져 있다.

</p><hr>
<p> 이렇게 수열이 귀납적으로 정의된 경우 어떤 항의 값을  컴퓨터를 이용해서 알고자 할 때 

</p><ul>
<li> 재귀함수 혹은 
</li><li> 다이나믹 프로그래밍
</li></ul>

으로 구할 수 있다.

<p>가능한 모든 경우를 따지는 방법은 재귀와 동일하지만 답을 구하는 과정이
그림과 같은 차이가 있다.

</p><ul>
   <li>재귀
<div><div id="highlighter_769056" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/dp_doc/dp_doc.php?pname=dp_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">1</code></div><div class="line number2 index1 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">--------------&gt; </code></div><div class="line number3 index2 alt2"><code class="c plain">답 (재귀함수)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 베이스</code></div><div class="line number4 index3 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">&lt;-------------</code></div><div class="line number5 index4 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">2</code></div></div></td></tr></tbody></table></div></div>


</li><li>다이나믹 
<div><div id="highlighter_78228" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/dp_doc/dp_doc.php?pname=dp_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c plain">답&nbsp; &lt;------------- (점화식) 베이스</code></div></div></td></tr></tbody></table></div></div>
</li></ul>

<hr>

다음과 같은 점화식이 주어질 경우 
<blockquote>
a<sub>n</sub>=a<sub>n-1</sub> + n <br>
단 , a<sub>1</sub> = 1
</blockquote>

에서 a<sub>4</sub>의  값은 얼마인가?

<p>(풀이)

</p><ol>
<li>a<sub>4</sub> = a<sub>3</sub> + 4 
</li><li>a<sub>3</sub> = a<sub>2</sub> + 3 
</li><li>a<sub>2</sub> = a<sub>1</sub> + 2 
</li><li>a<sub>1</sub> = 1 
</li></ol>

<ul>
<li>재귀로 

<p><img src="./다이나믹 프로그래밍 간략한 설명_files/recur.gif">

</p><div><div id="highlighter_698755" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/dp_doc/dp_doc.php?pname=dp_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c color1 bold">int</code> <code class="c plain">a(</code><code class="c color1 bold">int</code> <code class="c plain">n)</code></div><div class="line number2 index1 alt1"><code class="c plain">{</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="c spaces">&nbsp;&nbsp;</code><code class="c keyword bold">if</code> <code class="c plain">(n == 1) </code><code class="c keyword bold">return</code> <code class="c plain">1;&nbsp;&nbsp;&nbsp; </code><code class="c comments">//base</code></div><div class="line number5 index4 alt2"><code class="c spaces">&nbsp;&nbsp;</code><code class="c keyword bold">return</code> <code class="c plain">a(n-1) + n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="c comments">// 재귀 </code></div><div class="line number6 index5 alt1"><code class="c plain">}</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="c color1 bold">int</code> <code class="c plain">main()</code></div><div class="line number9 index8 alt2"><code class="c plain">{</code></div><div class="line number10 index9 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">printf</code><code class="c plain">(</code><code class="c string">"%d\n"</code><code class="c plain">,a(4));</code></div><div class="line number11 index10 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">return</code> <code class="c plain">0;</code></div><div class="line number12 index11 alt1"><code class="c plain">}</code></div></div></td></tr></tbody></table></div></div>
</li><li>다이나믹 방법으로 

<p><img src="./다이나믹 프로그래밍 간략한 설명_files/dy.gif">
</p></li></ul>

<div><div id="highlighter_423663" class="syntaxhighlighter  c"><div class="toolbar"><span><a href="http://211.228.163.31/30stair/dp_doc/dp_doc.php?pname=dp_doc#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="c color1 bold">int</code> <code class="c plain">a[5]; </code><code class="c comments">// 다이나믹 방법에서는 전에서 구한 답을 저장하는데 배열을 이용한다.</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="c color1 bold">int</code> <code class="c plain">main()</code></div><div class="line number4 index3 alt1"><code class="c plain">{</code></div><div class="line number5 index4 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;</code><code class="c color1 bold">int</code> <code class="c plain">i;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">a[1]=1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="c comments">//base</code></div><div class="line number8 index7 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">for</code><code class="c plain">(i=2;i&lt;5;i++){</code></div><div class="line number9 index8 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">a[i]=a[i-1]+i;&nbsp; </code><code class="c comments">// 점화식(memoization)--점화식을 구하는게 관건이다.</code></div><div class="line number10 index9 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c functions bold">printf</code><code class="c plain">(</code><code class="c string">"%d\n"</code><code class="c plain">,a[4]);</code></div><div class="line number13 index12 alt2"><code class="c spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="c keyword bold">return</code> <code class="c plain">0;</code></div><div class="line number14 index13 alt1"><code class="c plain">}</code></div></div></td></tr></tbody></table></div></div>

<p>물 좋고 정자좋은 데가 없는 법 이 방법도 배열을 이용해야 하므로 메모리를 많이 차지 하는 태생적 단점이 있지만
재귀보다는 속도면에서는 월등하므로 많이 이용한다.

</p><p>다이나믹 프로그램은 처음 접할 시에 어려움이 있으므로 몇가지 자주 사용하는 접근 방법으로 다이나믹에 대한
개념을 잡고 여러가지 확장 유형 혹은 나름의 방법을 찾는 방향으로 가자....

</p><pre class="src">출처:dovelet
</pre>
      
<hr>
<a href="http://211.228.163.31/judgeonline/showmessage.php?pname=dp_doc">[질/답]</a>
<div align="right">
<a href="http://211.228.163.31/index.php">[홈으로]</a>&nbsp;&nbsp;<a href="javascript:history.go(-1)">[뒤 로]</a>
</div>

   

</body></html>